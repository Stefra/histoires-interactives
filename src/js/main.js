// Attend que toute la page HTML soit charg√©e
document.addEventListener('DOMContentLoaded', () => {

    // Trouve tous les boutons qui ont la classe 'dice-roll-button'
    const diceButtons = document.querySelectorAll('.dice-roll-button');
    // Trouve la zone o√π afficher le r√©sultat
    const resultArea = document.getElementById('dice-result-area');
  
    // Si on ne trouve ni bouton ni zone de r√©sultat, pas besoin de continuer
    if (!diceButtons.length || !resultArea) {
      return;
    }
  
    // Pour chaque bouton trouv√©...
    diceButtons.forEach(button => {
      // Ajoute un √©couteur d'√©v√©nement : que faire quand on clique ?
      button.addEventListener('click', () => {
  
        // D√©sactive le bouton pour √©viter les clics multiples pendant le lancer
        button.disabled = true;
  
        // R√©cup√®re les informations stock√©es dans les attributs data-*
        const storyId = button.dataset.storyId;
        const successRoll = parseInt(button.dataset.successRoll, 10); // Convertit en nombre
        const successTarget = button.dataset.successTarget;
        const failureTarget = button.dataset.failureTarget;
  
        // V√©rification simple (au cas o√π)
        if (!storyId || isNaN(successRoll) || !successTarget || !failureTarget) {
          resultArea.textContent = "Erreur : Configuration du bouton incorrecte.";
          console.error("Attributs data-* manquants ou invalides sur le bouton de d√© :", button.dataset);
          // Ne pas r√©activer le bouton ici pour √©viter des clics r√©p√©t√©s sur une config erron√©e
          return; // Arr√™te l'ex√©cution
        }
  
        // Affiche un message d'attente
        resultArea.innerHTML = "Lancement du d√©... <span class='dice-animation'>üé≤</span>"; // Ajout d'un d√© qui tourne (simple)
  
        // --- Simulation du lancer de d√© ---
        // Petit d√©lai pour l'effet visuel
        setTimeout(() => {
          const roll = Math.floor(Math.random() * 6) + 1; // Nombre al√©atoire entre 1 et 6
  
          // D√©termine la cible en fonction du r√©sultat
          let targetStepId;
          let resultMessage;
          if (roll >= successRoll) {
            targetStepId = successTarget;
            resultMessage = `R√©sultat : <span class="dice-result roll-${roll}"></span> ${roll} (R√©ussite !)`; // Affichage du d√© et du r√©sultat
          } else {
            targetStepId = failureTarget;
            resultMessage = `R√©sultat : <span class="dice-result roll-${roll}"></span> ${roll} (√âchec)`; // Affichage du d√© et du r√©sultat
          }
  
          // Affiche le r√©sultat
          resultArea.innerHTML = resultMessage; // Utilise innerHTML pour interpr√©ter les span
  
          // --- Redirection vers la page suivante ---
          // Attends un peu pour que le joueur voie le r√©sultat
          setTimeout(() => {
            const nextPageUrl = `/histoires/${storyId}/${targetStepId}/`;
            window.location.href = nextPageUrl; // Change l'URL du navigateur
          }, 1800); // Attend 1.8 seconde avant de changer de page
  
        }, 1000); // Attend 1 seconde avant de "lancer" le d√©
      });
    });
  });